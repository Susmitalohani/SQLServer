--Assignment.9
--1.
select * from employees e 
select * from job_history jh 

create table job_historyy (employee_id_old numeric(6),
start_Date_old timestamp,
end_Date_old timestamp,
job_id_old varchar(10),
department_id_old numeric(4)
);

insert into job_historyy values(1,'2020-02-12','2020-10-23','databse',90);

select * from job_historyy
create or replace  function job_changes()
returns trigger
language 'plpgsql'
as $$
declare
begin
	insert into job_historyy (employee_id_old,
start_Date_old,
end_Date_old,
job_id_old,
department_id_old)
	values (old.employee_id,old.start_date,old.end_date,old.job_id,old.department_id);
return new;
end;
$$;

create or replace trigger job_trg
after update 
on job_history 
for each row 
execute procedure job_changes();
 
select * from job_historyy jh 
select * from job_history 

update job_history set job_id = 'Jr.Data' where employee_id =102;

----------------------------------------
--2.
create table employee_copy(employee_id int,name varchar(50),job_id varchar(50),hire_date date);
insert into employee_copy values (1,'susmita lohani','Database','2020-02-14'),
                                  (2,'samima thapa','.net','2020-02-15'),
                                   (3,'sunisha bhattarai','.net','2020-01-12');

select * from employee_copy;

create or replace function change_time()
returns trigger 
as 
$$
declare 
begin
if to_char(now()::time,'hh24')::int > 6 or to_char(now()::time,'hh24')::int > 10 then
RAISE EXCEPTION 'Sorry! No change can be made after 6 AM and before 10 PM';
end if;
return null;
end;

$$
language 'plpgsql';


create or replace  trigger changes
after update or delete or insert
on employee_copy
for each row 
execute procedure change_time();

insert into employee_copy values(8,'Susmita Lohani','Jr.Database','2023-04-26');

select * from employee_copy ec ;
------------------------------------------------
--3.
create or replace function nochange()
returns trigger 
as 
$$
begin 
	if to_char(current_date, 'day') not in ('Thursday', 'Friday') then 
	  raise exception 'Sorry! No changes can be made to employees from Thursday to Friday';
	end if;
	return new;
end;
$$
language plpgsql;

create or replace trigger nochang
after update or delete or insert 
on employee_copy
for each row
execute procedure nochange();

insert into employee_copy values(3,'hemanta sitaula','Sr.Databse','2023-04-26'); 
-------------------------------------------------------
--4.
create table emp(id int,name varchar(50),salary int,dept_id int);

insert into emp values(1,'susmita lohani',5000,1),
                               (2,'sunisha bhattarai',25000,1),
                               (3,'samima thapa',1000,2),
                               (4,'narayan lohani',15000,2);

select dept_id, min(Salary),max(Salary) from emp group by dept_id;
select * from emp;


CREATE OR REPLACE FUNCTION a()
RETURNS TRIGGER
AS $$
BEGIN
    IF NOT EXISTS (
    SELECT 1 FROM emp
    WHERE dept_id  = NEW.dept_id 
    AND salary = NEW.salary
    ) then
    
        IF (NEW.salary < (SELECT MIN(salary) FROM emp WHERE dept_id  = NEW.dept_id )
        OR NEW.salary > (SELECT MAX(salary) FROM emp WHERE dept_id  = NEW.dept_id )) THEN
            RAISE EXCEPTION 'Salary out of range';
        END IF;

    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE or replace TRIGGER b 
BEFORE INSERT OR UPDATE ON emp
FOR EACH ROW EXECUTE PROCEDURE a();

insert into emp values(8,'hari lohani',60000,1);
update emp set salary=6000 where id=1;